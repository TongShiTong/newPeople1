{"remainingRequest":"C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\abcd\\Desktop\\activity-durian\\src\\views\\Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"C:\\Users\\abcd\\Desktop\\activity-durian\\src\\views\\Home.vue","mtime":1597470582700},{"path":"C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\abcd\\Desktop\\activity-durian\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}